Tester Notes: (ref https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices)
* Private Keys
  * Private keys should be >=2048bit RSA, or >=256bit ECDSA (eliptic curve). These provide 112 and 128 bits of security respectively.
  * A small number of older clients don't support ECDSA. Support both if possible.
  * Keys should be encrypted (but we shouldn't have visibility over key storage in most cases)
* Certificate naming
  * Certificates should be valid for all the hostnames they are used on. e.g. both "www.lateralsecurity.com" and "lateralsecurity.com"
  * Wildcard certificates should be avoided as it increases the likely number of people having access to an "impersonate entire domain" free-pass.
  * The subject alternative name (SAN) extension should be used and >= the Common Name (CN) field. Newer browsers don't check CN for validation.
* Certificate Authority
  * Should be trusted. (I'm lookin' at you GeoTrust, https://en.wikipedia.org/wiki/GeoTrust) None of these should still be in circulation though.
  * Shouldn't be self-signed. An internal CA may be fine if the site is only consumed / accessible internally.
  * Should support Certificate Revocation List (CRL) and Online Certificate Status Protocol (OCSP).
  * Issuing CA can be whitelisted by adding a DNS CAA record to the domain. We don't typically check this.
* Certificate Signing
  * Leaf certificate SHOULD be SHA256 signed. (MD5 is breakable in practice, SHA1 is likely breakable by state level).
  * Intermediate certificates MUST be SHA256, otherwise will be rejected by browsers.
  * Entire certificate chain should be sent to the client, rather than assuming the client knows about the intermediaries.

* Protocol Support
  * SSLv2 and SSLv3 are insecure, TLSv1.0 and TLSv1.1 are considered legacy/deprecated, TLSv1.2 and TLSv1.3 are recommended.
  * TLSv1.0 and TLSv1.1 may be required to support older clients. Credit card payments (PCI DSS) MUST NOT use SSLvX or TLSv1.0.
  * TLSv1.1 doesn't contain known vulnerabilities; however, it also does not support modern ciphers.
  * TLSv1.3 provides better performance, security, and removes insecure features; ciphers,compression, etc

* Cipher Suites to Avoid
  * Anonymous Diffie-Hellman (ADH) - This does not provide authentication.
  * NULL cipher - This does not provide encryption.
  * Export ciphers (usually prefixed with EXP) - These are intentionally weak so that they could get around USA crypto-export requirements.
  * Weak ciphers (112 bits or less).
  * RC4 - Straight up insecure, uses XOR keystreams.
  * 3DES / DES / RC2 / IDEA - These are 64bit block ciphers, old, and weak.
  * RSA key exchanges (TLS_RSA) - Also old and weak. Preferred alternative is ECDHE, with DHE as fallback.

* Cipher Suites to Recommend
  * AEAD (Authenticated Encryption with Associated Data) cipher suites – CHACHA20_POLY1305, GCM and CCM.
  * PFS (Perfect Forward Secrecy) ciphers – ECDHE_RSA, ECDHE_ECDSA, DHE_RSA, DHE_DSS, CECPQ1 and all TLS 1.3 ciphers.
    * Does not rely on the server's private key, meaning that historical traffic cannot be decrypted if the private key is compromised.

Really good reference (from other security consultancy vendor)
-> https://gracefulsecurity.com/tls-ssl-vulnerabilities/